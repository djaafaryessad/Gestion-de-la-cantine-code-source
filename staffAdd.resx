<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="guna2PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        5wAAAABJRU5ErkJggg==
</value>
  </data>
</root>